//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;
using System;


namespace ET.ConfigEditor
{

[Serializable]
public sealed partial class AIConfig :  Bright.Config.EditorBeanBase 
{
    public AIConfig()
    {
            Name = "";
            Desc = "";
            NodeParams = System.Array.Empty<int>();
    }

    public override void LoadJson(SimpleJSON.JSONObject _json)
    {
        { 
            var _fieldJson = _json["Id"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  Id = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["AIConfigId"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  AIConfigId = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["Order"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  Order = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["Name"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  Name = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["Desc"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  Desc = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["NodeParams"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } int _n = _fieldJson.Count; NodeParams = new int[_n]; int _index=0; foreach(SimpleJSON.JSONNode __e in _fieldJson.Children) { int __v;  if(!__e.IsNumber) { throw new SerializationException(); }  __v = __e;  NodeParams[_index++] = __v; }  
            }
        }
        
    }

    public override void SaveJson(SimpleJSON.JSONObject _json)
    {
        {
            _json["Id"] = new JSONNumber(Id);
        }
        {
            _json["AIConfigId"] = new JSONNumber(AIConfigId);
        }
        {
            _json["Order"] = new JSONNumber(Order);
        }
        {

            if (Name == null) { throw new System.ArgumentNullException(); }
            _json["Name"] = new JSONString(Name);
        }
        {

            if (Desc == null) { throw new System.ArgumentNullException(); }
            _json["Desc"] = new JSONString(Desc);
        }
        {

            if (NodeParams == null) { throw new System.ArgumentNullException(); }
            { var __cjson = new JSONArray(); foreach(var _e in NodeParams) { __cjson["null"] = new JSONNumber(_e); } _json["NodeParams"] = __cjson; }
        }
    }

    public static AIConfig LoadJsonAIConfig(SimpleJSON.JSONNode _json)
    {
        AIConfig obj = new AIConfig();
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonAIConfig(AIConfig _obj, SimpleJSON.JSONNode _json)
    {
        _obj.SaveJson((SimpleJSON.JSONObject)_json);
    }

    /// <summary>
    /// Id
    /// </summary>
    public int Id;

    /// <summary>
    /// 所属ai
    /// </summary>
    public int AIConfigId;

    /// <summary>
    /// 此ai中的顺序
    /// </summary>
    public int Order;

    /// <summary>
    /// 节点名字
    /// </summary>
    public string Name;

    /// <summary>
    /// 描述
    /// </summary>
    public string Desc;

    /// <summary>
    /// 节点参数
    /// </summary>
    public int[] NodeParams;

}
}
